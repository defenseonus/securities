+Uevent.stream-events.enableBatchRefUpdatedEvents Enable streaming of batch-ref-updated event which represents group of refs updated during a single batch ref update operation. Single ref updates are also streamed as a batch-ref-updated events with a single ref specified. This allows event listeners to react on all ref updated events and disable individual ref-updated events by setting event.stream-events.enableRefUpdatedEvents to false.  By default, false.  event.stream-events.enableDraftCommentEvents Enable streaming of ref-updated events for refs/draft-comments refs. Enable this flag in case listeners in your system are supposed to react on draft operations.  NOTE Due to the nature of drafts, the amount of ref-updated events created on draft operations could be high. The extra amount of events depends on the usage pattern of the installation. It is worth evaluating the amount of extra events produced before enabling this flag by counting the calls to the draft APIs. By default, false.  Section experiments  This section covers experimental new features. Gerrit uses experiments to research new behavior in frontend and core backend. Once the research is done, the experimental feature either stays and the experimentation flag gets removed, or the feature as a whole gets removed  experiments.enabled List of experiments that are currently enabled. The release notes contain currently available experiments.  We will not remove experiments in stable patch releases. They are likely to be removed in the next stable version.  [experiments]   enabled = ExperimentKey experiments.disabled List of experiments that are currently disabled. The release notes contain currently available experiments. This list disables experiments with the given key that are either enabled by default or explicitly in the config.  [experiments]   disabled = ExperimentKey Section ldap  LDAP integration is only enabled if auth.type is set to HTTP_LDAP, LDAP or CLIENT_SSL_CERT_LDAP. See above for a detailed description of the auth.type settings and their implications.  An example LDAP configuration follows, and then discussion of the parameters introduced here. Suitable defaults for most parameters are automatically guessed based on the type of server detected during startup. The guessed defaults support RFC 2307, Active Directory and FreeIPA.  [ldap]   server = ldap://ldap.example.com    accountBase = ou=people,dc=example,dc=com   accountPattern = (&(objectClass=person)(uid=${username}))   accountFullName = displayName   accountEmailAddress = mail    groupBase = ou=groups,dc=example,dc=com   groupMemberPattern = (&(objectClass=group)(member=${dn})) ldap.guessRelevantGroups Filter the groups found in LDAP by guessing the ones relevant to Gerrit and removing the others from list completions and ACL evaluations. The guess is based on two elements: the projects most recently accessed in the cache and the list of LDAP groups included in their ACLs.  Please note that projects rarely used and thus not cached may be temporarily inaccessible by users even with LDAP membership and grants referenced in the ACLs.  By default, true.  ldap.server URL of the organization’s LDAP server to query for user information and group membership from. Must be of the form ldap://host or ldaps://host to bind with either a plaintext or SSL connection.  If auth.type is LDAP this setting should use ldaps:// to ensure the end user’s plaintext password is transmitted only over an encrypted connection.  Note: Gerrit relies on the JNDI implementation provided by the underlying JDK for LDAP connectivity.  Most OpenJDK-based JDK distributions support specifying multiple LDAP servers as space-separated URLs.  To configure multiple LDAP servers, use the following syntax:  server = ldaps://ldap1 ldaps://ldap2  However, different JDK distributions may implement this behavior differently. If you are using a non-OpenJDK-based JDK, refer to its documentation to confirm how multiple LDAP URLs are handled. See issue 40010644.  ldap.startTls If true, Gerrit will perform StartTLS extended operation.  By default, false, StartTLS will not be enabled.  ldap.supportAnonymous If false, Gerrit will provide credentials only at connection open, this is required for some LDAP implementations that do not allow anonymous bind for StartTLS or for reauthentication.  By default, true.  ldap.sslVerify If false and ldap.server is an ldaps:// style URL or ldap.startTls is true, Gerrit will not verify the server certificate when it connects to perform a query.  By default, true, requiring the certificate to be verified.  ldap.groupsVisibleToAll If true, LDAP groups are visible to all registered users.  By default, false, LDAP groups are visible only to administrators and group members.  ldap.username (Optional) Username to bind to the LDAP server with. If not set, an anonymous connection to the LDAP server is attempted.  ldap.password (Optional) Password for the user identified by ldap.username. If not set, an anonymous (or passwordless) connection to the LDAP server is attempted.  ldap.referral (Optional) How an LDAP referral should be handled if it is encountered during directory traversal. Set to follow to automatically follow any referrals, or ignore to ignore the referrals.  By default, ignore.  ldap.readTimeout (Optional) The read timeout for an LDAP operation. The value is in the usual time-unit format like "1 s", "100 ms", etc…​ A timeout can be used to avoid blocking all of the SSH command start threads in case the LDAP server becomes slow.  By default there is no timeout and Gerrit will wait for the LDAP server to respond until the TCP connection times out.  ldap.accountBase Root of the tree containing all user accounts. This is typically of the form ou=people,dc=example,dc=com.  This setting may be added multiple times to specify more than one root.  ldap.accountScope Scope of the search performed for accounts. Must be one of:  one: Search only one level below accountBase, but not recursive  sub or subtree: Search recursively below accountBase  base or object: Search exactly accountBase; probably not desired  Default is subtree as many directories have several levels.  ldap.accountPattern Query pattern to use when searching for a user account. This may be any valid LDAP query expression, including the standard (&…​) and (|…​) operators. If auth.type is HTTP_LDAP then the variable ${username} is replaced with a parameter set to the username that was supplied by the HTTP server. If auth.type is LDAP then the variable ${username} is replaced by the string entered by the end user.  This pattern is used to search the objects contained directly under the ldap.accountBase tree. A typical setting for this parameter is (uid=${username}) or (cn=${username}), but the proper setting depends on the LDAP schema used by the directory server.  Default is (uid=${username}) for FreeIPA and RFC 2307 servers, and (&(objectClass=user)(sAMAccountName=${username})) for Active Directory.  ldap.accountFullName (Optional) Name of an attribute on the user account object which contains the initial value for the user’s full name field in Gerrit. Typically this is the displayName property in LDAP, but could also be legalName or cn.  Attribute values may be concatenated with literal strings. For example to join given name and surname together, use the pattern ${givenName} ${SN}.  Default is displayName for FreeIPA and RFC 2307 servers, and ${givenName} ${sn} for Active Directory.  A non-empty or default value prevents users from modifying their full name field. To allow edits to the full name field, set to the empty string.  ldap.accountEmailAddress (Optional) Name of an attribute on the user account object which contains the user’s Internet email address, as defined by this LDAP server.  Attribute values may be concatenated with literal strings, for example to set the email address to the lowercase form of sAMAccountName followed by a constant domain name, use ${sAMAccountName.toLowerCase}@example.com.  If set, the preferred email address will be prefilled from LDAP, but users may still be able to register additional email addresses, and select a different preferred email address.  Default is mail.  ldap.accountSshUserName (Optional) Name of an attribute on the user account object which contains the initial value for the user’s SSH username field in Gerrit. Typically this is the uid property in LDAP, but could also be cn. Administrators should prefer to match the attribute corresponding to the user’s workstation username, as this is what SSH clients will default to.  Attribute values may also be forced to lowercase, or to uppercase in an expression. For example, ${sAMAccountName.toLowerCase} will force the value of sAMAccountName, if defined, to be all lowercase. The suffix .toUpperCase can be used for the other direction. The suffix .localPart can be used to split attribute values of the form 'user@example.com' and return only the left hand side, for example ${userPrincipalName.localPart} would provide only 'user'.  If set, users will be unable to modify their SSH username field, as Gerrit will populate it only from the LDAP data. Note that once the username has been set it cannot be changed, therefore it is recommended not to make changes to this setting that would cause the value to differ, as this will prevent users from logging in.  Default is uid for FreeIPA and RFC 2307 servers, and ${sAMAccountName.toLowerCase} for Active Directory.  ldap.accountMemberField (Optional) Name of an attribute on the user account object which contains the groups the user is part of. Typically used for Active Directory and FreeIPA servers.  Default is unset for RFC 2307 servers (disabled) and memberOf for Active Directory and FreeIPA.  ldap.accountMemberExpandGroups (Optional) Whether to expand nested groups recursively. This setting is used only if ldap.accountMemberField is set.  Default is unset for FreeIPA and true for RFC 2307 servers and Active Directory.  ldap.fetchMemberOfEagerly (Optional) Whether to fetch the memberOf account attribute on login. Setups which use LDAP for user authentication but don’t make use of the LDAP groups may benefit from setting this option to false as this will result in a much faster LDAP login.  Default is unset for RFC 2307 servers (disabled) and true for Active Directory and FreeIPA.  ldap.groupBase Root of the tree containing all group objects. This is typically of the form ou=groups,dc=example,dc=com.  This setting may be added multiple times to specify more than one root.  ldap.groupScope Scope of the search performed for group objects. Must be one of:  one: Search only one level below groupBase, but not recursive  sub or subtree: Search recursively below groupBase  base or object: Search exactly groupBase; probably not desired  Default is subtree as many directories have several levels.  ldap.groupPattern Query pattern used when searching for an LDAP group to connect to a Gerrit group. This may be any valid LDAP query expression, including the standard (&…​) and (|…​) operators. The variable ${groupname} is replaced with the search term supplied by the group owner.  Default is (cn=${groupname}) for FreeIPA and RFC 2307 servers, and (&(objectClass=group)(cn=${groupname})) for Active Directory.  ldap.groupMemberPattern Query pattern to use when searching for the groups that a user account is currently a member of. This may be any valid LDAP query expression, including the standard (&…​) and (|…​) operators.  If auth.type is HTTP_LDAP then the variable ${username} is replaced with a parameter set to the username that was supplied by the HTTP server. Other variables appearing in the pattern, such as ${fooBarAttribute}, are replaced with the value of the corresponding attribute (in this case, fooBarAttribute) as read from the user’s account object matched under ldap.accountBase. Attributes such as ${dn} or ${uidNumber} may be useful.  Default is (|(memberUid=${username})(gidNumber=${gidNumber})) for RFC 2307, and unset (disabled) for Active Directory and FreeIPA.  ldap.groupName (Optional) Name of the attribute on the group object which contains the value to use as the group name in Gerrit.  Typically the attribute name is cn for RFC 2307 and Active Directory servers. For other servers the attribute name may differ, for example apple-group-realname on Apple MacOS X Server.  It is also possible to specify a literal string containing a pattern of attribute values. For example to create a Gerrit group name consisting of LDAP group name and group ID, use the pattern ${cn} (${gidNumber}).  Default is cn.  ldap.mandatoryGroup All users must be a member of this group to allow account creation or authentication.  For example, setting to ldap/gerritaccess limits account creation or authentication to members of the ldap group gerritaccess.  Setting mandatoryGroup implies enabling of ldap.fetchMemberOfEagerly  By default, unset.  ldap.localUsernameToLowerCase Converts the local username, that is used to login into the Gerrit Web UI, to lower case before doing the LDAP authentication. By setting this parameter to true, a case insensitive login to the Gerrit Web UI can be achieved.  If set, it must be ensured that the local usernames for all existing accounts are converted to lower case, otherwise a user that has a local username that contains upper case characters will not be able to login anymore. The local usernames for the existing accounts can be converted to lower case by running the server program LocalUsernamesToLowerCase. Please be aware that the conversion of the local usernames to lower case can’t be undone. For newly created accounts the local username will be directly stored in lower case.  By default, unset/false.  ldap.authentication Defines how Gerrit authenticates with the server. When set to GSSAPI Gerrit will use Kerberos. To use kerberos the java.security.auth.login.config system property must point to a login to a JAAS configuration file and, if Java 6 is used, the system property java.security.krb5.conf must point to the appropriate krb5.ini file with references to the KDC.  Typical jaas.conf.  KerberosLogin {     com.sun.security.auth.module.Krb5LoginModule             required             useTicketCache=true             doNotPrompt=true             renewTGT=`true`; }; See Java documentation on how to create the krb5.ini file.  Note the renewTGT property to make sure the TGT does not expire, and useTicketCache to use the TGT supplied by the operating system. As the whole point of using GSSAPI is to have passwordless authentication to the LDAP service, this option does not acquire a new TGT on its own.  On Windows servers the registry key HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters must have the DWORD value allowtgtsessionkey set to 1 and the account must not have local administrator privileges.  NOTE: Windows is not recommended as a server-side platform for running Gerrit Code Review, because of the lack of adoption from the Gerrit Community, incomplete functional validation and lack of security testing. Gerrit on Windows Server is not actively supported even though it may still be fully or partially functioning as expected.  ldap.useConnectionPooling (Optional) Enable the LDAP connection pooling or not.  If it is true, the LDAP service provider maintains a pool of (possibly) previously used connections and assigns them to a Context instance as needed. When a Context instance is done with a connection (closed or garbage collected), the connection is returned to the pool for future use.  For details, see LDAP connection management (Pool) and LDAP connection management (Configuration)  By default, false.  ldap.connectTimeout (Optional) Timeout period for establishment of an LDAP connection.  The value is in the usual time-unit format like "1 s", "100 ms", etc…​  By default there is no timeout and Gerrit will wait indefinitely.  LDAP Connection Pooling  Once LDAP connection pooling is enabled by setting the ldap.useConnectionPooling configuration property to true, the connection pool can be configured using JVM system properties as explained in the Java SE Documentation.  For standalone Gerrit (running with the embedded Jetty), JVM system properties are specified in the container section:    javaOptions = -Dcom.sun.jndi.ldap.connect.pool.maxsize=20   javaOptions = -Dcom.sun.jndi.ldap.connect.pool.prefsize=10   javaOptions = -Dcom.sun.jndi.ldap.connect.pool.timeout=300000 Section lfs  lfs.plugin The name of a plugin which serves the LFS protocol on the <project-name>/info/lfs/objects/batch endpoint. When not configured Gerrit will respond with 501 Not Implemented on LFS protocol requests.  By default unset.  Section log  log.jsonLogging If set to true, enables error, ssh and http logging in JSON format (file names: logs/error_log.json, logs/sshd_log.json and logs/httpd_log.json).  The option only applies to Gerrit built-in loggers. It is ignored when a log4j configuration is specified via container.javaOptions, for example -Dlog4j.configuration=file://etc/log4j.properties.  Defaults to false.  log.textLogging If set to true, enables error logging in regular plain text format. Can only be disabled if jsonLogging is enabled.  The option only applies to Gerrit built-in loggers. It is ignored when a log4j configuration is specified via container.javaOptions, for example -Dlog4j.configuration=file://etc/log4j.properties.  Defaults to true.  log.compress If set to true, log files are compressed at server startup and then daily at 11pm (in the server’s local time zone).  Defaults to true.  log.rotate If set to true, log files are rotated daily at midnight (GMT).  Defaults to true.  log.timeToKeep Time that logs should be kept until they are being deleted. Values should use common suffixes to express their setting:  d, day, days  w, week, weeks (1 week is treated as 7 days)  mon, month, months (1 month is treated as 30 days)  y, year, years (1 year is treated as 365 days)  The minimum granularity is days. Using a smaller time unit will result in deletion of all old logs, as if 0d would have been configured.  Actively used logs will never be deleted. Thus, this feature only works in combination with enabled log.rotate. Log deletion happens at server startup and then daily at 11pm (in the server’s local time zone).  Depending on the filesystem the following file times will be used, in order of priority:  Time of file creation  Time when the file was last modified  Date added to the filename as part of log file rotation. Time will be set to 00:00:00Z.  If none of the above is available, the log file won’t be deleted.  Defaults to -1, i.e. being disabled.  Section metrics  metrics.reservoir The type of data reservoir used by the metrics system to calculate the percentile values for timers and histograms. It can be set to one of the following values:  ExponentiallyDecaying: An exponentially-decaying random reservoir based on Cormode et al’s forward-decaying priority reservoir sampling method to produce a statistically representative sampling reservoir, exponentially biased towards newer entries.  SlidingTimeWindowArray: A sliding window that stores only the measurements made in the last window using chunks of 512 samples.  SlidingTimeWindow: A sliding window that stores only the measurements made in the last window using a skip list.  SlidingWindow: A sliding window that stores only the last measurements.  Uniform: A random sampling reservoir that uses Vitter’s Algorithm R to produce a statistically representative sample.  Defaults to ExponentiallyDecaying.  metrics.ExponentiallyDecaying.alpha The exponential decay factor; the higher this is, the more biased the reservoir will be towards newer values.  metrics.<reservoirType>.size The number of samples to keep in the reservoir. Applies to all reservoir types except the sliding time-based ones.  Defaults to 1028.  metrics.<reservoirType>.window The window of time for keeping data in the reservoir. It only applies to sliding time-based reservoir types.  Section mimetype  mimetype.<name>.safe If set to true, files with the MIME type <name> will be sent as direct downloads to the user’s browser, rather than being wrapped up inside of zipped archives. The type name may be a complete type name, e.g. image/gif, a generic media type, e.g. image/*, or the wildcard */* to match all types.  By default, false for all MIME types.  Common examples:  [mimetype "image/*"]   safe = true  [mimetype "application/pdf"]   safe = true  [mimetype "application/msword"]   safe = true  [mimetype "application/vnd.ms-excel"]   safe = true Section noteDb  NoteDb is the Git-based database storage backend for Gerrit. For more information, including how to migrate data from an older Gerrit version, see the documentation.  notedb.accounts.sequenceBatchSize The next available account sequence number is stored as UTF-8 text in a blob pointed to by the refs/sequences/accounts ref in the All-Users repository. Multiple processes share the same sequence by incrementing the counter using normal git ref updates. To amortize the cost of these ref updates, processes increment the counter by a larger number and hand out numbers from that range in memory until they run out. This configuration parameter controls the size of the account ID batch that each process retrieves at once.  By default, 1.  notedb.changes.sequenceBatchSize The next available change sequence number is stored as UTF-8 text in a blob pointed to by the refs/sequences/changes ref in the All-Projects repository. Multiple processes share the same sequence by incrementing the counter using normal git ref updates. To amortize the cost of these ref updates, processes increment the counter by a larger number and hand out numbers from that range in memory until they run out. This configuration parameter controls the size of the change ID batch that each process retrieves at once.  By default, 20.  Section oauth  OAuth integration is only enabled if auth.type is set to OAUTH. See above for a detailed description of the auth.type settings and their implications.  By default, contact information, like the full name and email address, is retrieved from the selected OAuth provider when a user account is created, or when a user requests to reload that information in the settings UI. If that is not supported by the OAuth provider, users can be allowed to edit their contact information manually.  oauth.allowEditFullName If true, the full name can be edited in the contact information.  Default is false.  oauth.allowRegisterNewEmail If true, additional email addresses can be registered in the contact information.  Default is false.  Section operator alias  Operator aliasing allows global aliases to be defined for query operators. Currently only change queries are supported. The alias name is the git config key name, and the operator being aliased is the git config value.  For example:  [operator-alias "change"]   oldage = age   number = change This section is particularly useful to alias operator names which may be long and clunky because they include a plugin name in them to a shorter name without the plugin name.  Aliases are resolved dynamically at invocation time to any currently loaded versions of plugins. If the alias points to an operator provided by a plugin which is not currently loaded, or the plugin does not define the operator, then "unsupported operator" is returned to the user.  Aliases will override existing operators. In the case of multiple aliases with the same name, the last one defined will be used.  When the target of an alias doesn’t exist, the operator with the name of the alias will be used (if present). This enables an admin to config the system to override a core operator with an operator provided by a plugin when present and otherwise fall back to the operator provided by core.  Section pack  Global settings controlling how Gerrit Code Review creates pack streams for Git clients running clone, fetch, or pull. Most of these variables are per-client request, and thus should be carefully set given the expected concurrent request load and available CPU and memory resources.  pack.deltacompression If true, delta compression between objects is enabled. This may result in a smaller overall transfer for the client, but requires more server memory and CPU time.  False (off) by default, matching Gerrit Code Review 2.1.4.  pack.threads Maximum number of threads to use for delta compression (if enabled). This is per-client request. If set to 0 then the number of CPUs is auto-detected and one thread per CPU is used, per client request.  By default, 1.  Section plugins  plugins.checkFrequency How often plugins should be examined for new plugins to load, removed plugins to be unloaded, or updated plugins to be reloaded. Values can be specified using standard time unit abbreviations ('ms', 'sec', 'min', etc.).  If set to 0, automatic plugin reloading is disabled. Administrators may force reloading with gerrit plugin reload.  Default is 1 minute.  plugins.allowRemoteAdmin Enable remote installation, enable and disable of plugins over HTTP and SSH. If set to true Administrators can install new plugins remotely, or disable existing plugins. Defaults to false.  plugins.mandatory List of mandatory plugins. If a plugin from this list does not load, Gerrit will fail to start.  Disabling and restarting of a mandatory plugin is rejected, but reloading of a mandatory plugin is still possible.  plugins.jsLoadTimeout Set the timeout value for loading JavaScript plugins in Gerrit UI. Values can be specified using standard time unit abbreviations ('ms', 'sec', 'min', etc.).  Default is 5 seconds. Negative values will be converted to 0.  plugins.transitionalPushOptions Additional push options which should be accepted by gerrit as valid options even if they are not registered by any plugin(e.g. "myplugin~foo").  This config can be used when gerrit migrates from a deprecated plugin to the new one. The new plugin can (temporary) accept push options of the old plugin without registering such options.  plugins.loadPriority List of `pluginName`s required to have a specific loading order during Gerrit startup.  Each entry should contain a plugin name defined in the MANIFEST.MF under Gerrit-PluginName or a plugin JAR file name. During the Gerrit startup the loadPriority will influence the loading sequence of the JAR plugins.  NOTE Non-JAR plugins (e.g. Scripting, PolyGerrit plugins, ApiModule) are not influenced by this setting. Gerrit will always load plugins defining Gerrit-ApiModule in their MANIFEST.MF first. Then will load other plugins according to:  the order of plugins.loadPriority in gerrit.config,  the natural order of plugin JAR file names in plugins/ directory.  Example: Assuming we have three plugins: a-plugin.jar, b-plugin.jar, c-plugin.jar deployed to plugins/ directory. By default Gerrit will load them in the same order as they are listed above, as that follows the natural storing order. Now assume the below configuration  [plugins]   loadPriority = c-plugin   loadPriority = a-plugin Gerrit will load c-plugin first, followed-up by a-plugin and b-plugin last.  Section receive  This section is used to configure behavior of the 'receive-pack' handler, which responds to 'git push' requests.  receive.advertiseOpenChangesRefs Ref advertisement for Git pushes still works in a "the server speaks first fashion", as Git Protocol V2 only addressed fetches. Therefore, the server needs to send all available references. For large repositories, this data can amount to tens of megabytes. To reduce this footprint, all references in refs/changes/* are removed. However, this removal can increase the number of unnecessary objects that clients send back to the server, because the common ancestor found during negotiation might be further back in history.  To mitigate this, the server advertises to the user, the most recent receive.advertiseOpenChangesRefs open changes refs as additional "haves". This is a heuristic approach aimed at reducing the number of unnecessary objects that the client sends to the server. It is likely that the user has one of these changes in their local repository, which can serve as a starting point to determine the common ancestor shared by the client and server.  If receive.advertiseOpenChangesRefs is set to 0, no refs/changes/* will be advertised to the client.  Defaults to 32.
+t commit comments Comments 0C:/Lock) 
conversation Commit -hee receiving notifications because you're sub sc
